[["index.html", "Генерализация пространственных данных Введение", " Генерализация пространственных данных Тимофей Самсонов 2024-12-04 Введение Картографические базы данных "],["points-sel-work.html", "A Задание №1. Отбор точечных объектов Реализация алгоритма Settlement Spacing Реализация алгоритма взвешенной эффективной площади Реализация модели оценки условной графической нагрузки Отбор населенных пунктов для карты масштаба 1:4 000 000 Оценка полученных результатов Отчет", " A Задание №1. Отбор точечных объектов Цель задания — освоение методики автоматизированного отбора точечных объектов на примере населенных пунктов. Задачи: Изучить принципы, заложенные в методы отбора (исключения) точек Settlement Spacing (прореживание населенных пунктов) и Voronoy-based (взвешенной эффективной площади). Реализовать метод Settlement Spacing на языке программирования Python. Реализовать метод взвешенной эффективной площади на языке программирования Python. Добиться того, чтобы алгоритм не удалял преждевременно самые важные населенные пункты. Реализовать оценку графической нагрузки на языке программирования Python. Подготовить слой населенных пунктов субъекта РФ на основе данных OpenStreetMap. Построить модель зависимости условной графической нагрузки от коэффициента масштабирования для метода Settlement Spacing Осуществить автоматизированный отбор населенных пунктов для масштаба \\(1:4~000~000\\) при графической нагрузке \\(2\\), \\(4\\) и \\(6\\) \\(см^{-2}\\) методом Settlement Spacing. Осуществить аналогичный отбор методом взвешенной эффективной площади, оставив такое же количество населенных пунктов, что и в методе Settlement Spacing. Выполнить численную, графическую и географическую оценку результатов генерализации обоими методами. Сравнить результаты между собой. Реализация алгоритма Settlement Spacing Входные параметры: Точечный слой. Поле важности точки. Поле сохранения точки. Масштабирующий коэффициент. Входные данные: Тестирование инструмента производится на примере слоя poppnt_ural (можно вырезать из него небольшой фрагмент из нескольких десятков точек. Результат: По результатам выполнения инструмента каждой точке в поле сохранения точки должно быть проставлено значение \\(1\\) (оставить) или \\(0\\) (убрать). Реализация алгоритма взвешенной эффективной площади Входные параметры: Точечный слой. Поле важности точки. Поле сохранения точки. Доля сохраняемых точек (в %). Входные данные: Тестирование инструмента производится на примере слоя poppnt_ural (можно вырезать из него небольшой фрагмент из нескольких десятков точек. Результат: По результатам выполнения инструмента каждой точке в поле сохранения точки должно быть проставлено значение \\(1\\) (оставить) или \\(0\\) (убрать). Реализация модели оценки условной графической нагрузки Условная графическая нагрузка – средневзвешенное количество точек на единицу площади, где в качестве веса выступает размер точки, используемый при ее отображении на карте Входные параметры: Точечный слой. Поле, отвечающее за графический вес точки (диаметр значка). Пространственное разрешение сетки (в метрах). Выходное поле графической нагрузки Требования к входным данным: Поле, отвечающее за графический вес точки, должно содержать размеры значков, используемых для визуализации точек. Если значения всех размеров равны \\(1\\), вы получите обычную густоту точек на единицу площади. Алгоритм решения задачи: Построить регулярную сетку с заданным разрешением и охватом, покрывающим входной набор точек с небольшим запасом. Подсказка: вам необходимо построить горизонтальный ограничивающий прямоугольник, буферизовать его на величину разрешения сетки и подать буфер в качестве экстента в инструмент генерации регулярной сетки. Подсчитать суммарный графический вес точек в каждой ячейке и записать результат в новое поле. Сохранить полученную сетку в переменную. Отбор населенных пунктов для карты масштаба 1:4 000 000 В данной — заключительной — части задания необходимо произвести отбор населенных пунктов, используя собственные скрипты, а также произвести графическую оценку полученных результатов. Алгоритм выполнения задания: Скачать данные OSM на территорию Субъекта Федерации. Не следует для выполнения работы брать субъекты с малым числом населенных пунктов (Мурманская область, Еврейская АО, Республика Калмыкия и т.п.). Внимание: субъекты у всех студентов должны быть разные! Перепроецировать слой settlement-points в наилучшую проекцию для выбранной территории Сформировать поля Importance и Size, используя следующее отображение атрибутов: PLACE Importance Size City 5 5 Town 4 3 Village 3 1 Hamlet 2 1 Locality 1 1 Используя фрагмент данных и значения параметра \\(С\\) (Scale) в диапазоне от \\(1000\\) до \\(10000\\) с шагом \\(1000\\), подобрать регрессионную зависимость вида \\(y = \\alpha x^{-\\beta}\\) между значением параметра масштабирования \\(C\\) (Scale) и средней графической нагрузкой (\\(ед.~на~см^2\\)) в масштабе \\(1:4~000~000\\). Средняя графическая нагрузка оценивается как среднее значение по всем ненулевым ячейкам регулярной сетки. Размер сетки — \\(1~см^2\\) в результирующем масштабе. Найденная зависимость должна иметь примерно следующий вид: Внимание: если у вас очень большой или очень маленький субъект федерации, может потребоваться скорректировать шаги. Допустим, для Якутии может оказаться, что целесообразна последовательность от \\(10000\\) до \\(100000\\) с шагом \\(10000\\). Если кривая не выходит экспоненциальной, скорее всего вы работаете не в том диапазоне расстояний, что нужно. Выполнить отбор населенных пунктов с графической нагрузкой \\(2\\), \\(4\\) и \\(6\\) населенных пункта на \\(см^2\\) для масштаба \\(1:4~000~000\\). Соответствующий параметр \\(C\\) (Scale) подберите, используя найденную регрессионную зависимость. Аналогично: если масштаб 1:4 000 000 для вашего субъекта слишком малый или большой, вы можете его уменьшить или увеличить в 2 раза. Оценка полученных результатов Выполнить параметризацию параметра \\(x\\) обобщенного закона Топфера для трёх полученных генерализаций по каждому из двух алгоритмов, исходя из предположения, что отношение результирующего и исходного масштаба равно \\(1:40\\). Построить карты графической нагрузки для обоих алгоритмов. Оформить результаты в виде серии карт, отображающей: границу региона множество исходных точек бледно-серым цветом множество отобранных точек черным цветом соответствующего размера с подписями названий подписи основных населенных пунктов картограмму условной графической нагрузки Пример серии карт (вы можете упорядочить изображения другим путем — например, по вертикали): Отчет Работа оформляется в виде письменного отчета, в котором необходимо изложить все этапы исследования: цель и задачи исследования, суть метода отбора точек, суть принципа оценки условной графической нагрузки, суть обобщенного закона Топфера, процесс разработки инструментов с примерами кода. описание эксперимента по генерализации, включая: постановку задачи, нахождение регрессионной зависимости, сравнение времени работы модели и скрипта, выполнение отбора, оценку результатов в графическом (карты условной нагрузки) и численном (параметризация обобщенного закона Топфера) виде. "],["points-clust-work.html", "B Задание №2. Кластеризация системы расселения Кластеризация системы расселения субъекта Отчет", " B Задание №2. Кластеризация системы расселения Цель задания — освоение методов кластеризации и регионизации точек, построения центроидов и оценки качества кластеризации. В качестве методов кластеризации предлагается использовать DBSCAN, К средних и иерархическую. В качестве метода построения региона — альфа-оболочку. Исходные данные: точки населенных пунктов из Самостоятельной работы №1. Используемые библиотеки: geopandas, sklearn.cluster Подсказка по функциям: получение координат точек: get_coordinates(). кластеризация: К-средних: KMeans Иерархическая: AgglomerativeClustering DBSCAN: DBSCAN альфа-оболочка: concave_hull центроиды кластеров: representative_point. коэффициент силуэта: silhouette_score Кластеризация системы расселения субъекта Трансформируйте исходные данные в проекцию, оптимальную для выбранного региона. Подготовьте данные для использования в sklearn. Для это необходимо координаты точек выгрузить в numpy array. Используя метод DBSCAN, постройте серию из 5 кластеризаций населенных пунктов выбранного вами субъекта. Количество точек в кластере оставьте постоянным (3), но меняйте значение расстояния кластеризации. Расстояния подберите таким образом, чтобы различия в кластеризации были очевидны и помогали выявлять пространственные группировки разного масштаба. Используя методы К-средних и иерархической кластеризации (расстояние Уорда), постройте аналогичные серии из 5 кластеризаций. Количество кластеров задавайте то же, что вы получали в методе DBSCAN для соответствующих расстояний. Т.е. если вы в методе DBSCAN для разных расстояний получили 100, 70, 40, 20 и 5 кластеров, то именно столько же надо получить другими методами. Для всех полученных кластеризаций постройте альфа-оболочки кластеров. Рассчитайте для каждой кластеризации меру качества — коэффициент силуэта. Сведите ее в единую таблицу, где по столбцам идут методы кластеризации, а по строкам — количество кластеров. Для каждого уровня кластеризации и каждого метода подготовьте изображение, включающее: а) исходные точки, б) регионы кластеров, в) центроиды кластеров. Точки и регионы должны быть помечены разными цветами по номерам кластеров. Центроиды должны быть показаны окружностями радиуса, пропорционального количеству входящих точек. Пример изображения кластеров: Рис. B.1: Пример оформления результатов работы Перед вставкой данных карт в отчет добавьте на них элементы географической основы или используйте карту-подложку из картографического веб-сервиса. Отчет Напишите отчет о проделанной работе, включающий: Цель и задачи работы. Описание используемых алгоритмов кластеризации и регионизации. Описание процесса создания скриптов для решения поставленных задач. Серию из 15 карт кластерной структуры системы расселения региона, полученную по результатам кластеризации тремя алгоритмами (по 5 изображений на каждый метод). Анализ качества кластеризации (согласно коэффцициенту силуэта). Географический анализ результатов. Насколько реалистично выглядят кластеры, полученные разными методами к чему они привязаны? Можно ли выявить полимасштабность организации системы расселения на основе полученных изображений? "],["lines-simpl-work.html", "C Задание №3. Геометрическое упрощение линий C.1 Теоретические сведения Часть 1. Автоматизация методов оценки геометрической точности и коэффициента относительной извилистости Часть 2. Сравнение алгоритмов генерализации", " C Задание №3. Геометрическое упрощение линий Цель задания — освоение методики геометрического упрощения линий. Аннотация. Необходимо сравнить эффективность алгоритмов Дугласа-Пейкера, Висвалингам-Уайатта, Ванга-Мюллера и Ли-Оупеншоу при геометрическом урпощении береговых линий. При выполнении работы реализуются инструменты для вычисления коэффициента относительной извилистости и модифицированного расстояния Хаусдорфа. Алгоритмы Дугласа-Пейкера, Висвалингам-Уайатта и Ли-Оупеншоу берутся из программной библиотеки cartagen для языка Python Алгоритм Ванга-Мюллера используется из дополнительного модуля Geo Simplification для QGIS. C.1 Теоретические сведения C.1.1 Алгоритмы генерализации Алгоритм Ли-Оупеншоу (Li and Openshaw 1992) использует «естественный принцип», суть которого заключается в удалении деталей, размер которых менее видимой величины. Для этого на исходное множество линий накладывается регулярная сет ка ячеек с разрешением d Участок линии, пересекающий ячейку, имеет точку входа в нее и точку выхода. Этот участок заменяется на середину отрезка, соединяющего две данные точки. Таким образом, удаляются все изгибы, находящиеся внутри ячеек. Принцип работы алгоритма иллюстрирует Рис. C.1. Видно, что по своему поведению результирующая линия похожа на скользящее среднее. Рис. C.1: Принцип работы алгоритма Ли-Оупеншоу В основе работы алгоритма Ванга-Мюллера (Wang and Müller 1998) лежит сегментация линий на отдельные изгибы. Изгиб определяется как участок линии, на котором угол ее поворота сохраняет свой знак. Важным аспектом алгоритма является четкий алгоритм вычисления вершины изгиба, которая определяется как точка, имеющая максимальную сумму расстояний до начальной и конечной точки изгиба. Для каждого изгиба в алгоритме Ванга-Мюллера определяется его размер, изолированность, близость и схожесть с соседним изгибом. Изолированные изгибы подвергаются преувеличению. Расположенные рядом схожие изгибы объединяются в один путем слияния вершин и удаления изгиба между ними. Наконец, изгибы малого размера удаляются. Данные операции проиллюстрированы на Рис. C.2. В ArcGIS метод Ванга-Мюллера реализован в инструменте Simplify Line (режим BEND_SIMPLIFY). Рис. C.2: Элементы алгоритма Ванга-Мюллера: а) удаление; б) объединение; в) преувеличение изгибов Алгоритм Дугласа-Пейкера (Douglas and Peucker 1973) относится к алгоритмам редуцирования точек и основан на последовательном нахождении узлов линии, образующих максимальное отклонение от стягивающей хорды (Рис. C.3). В ArcGIS метод Дугласа-Пейкера реализован в инструменте Simplify Line (режим POINT_REMOVE). Рис. C.3: Принцип работы алгоритма Дугласа-Пейкера Наконец, алгоритм Висвалингам-Уайатта (Visvalingam and Whyatt 1993) относится к алгоритмам редуцирования точек и основан на последовательном удалении точек, углы которых образуют минимальную эффективную площадь (Рис. C.4). В ArcGIS данный алгоритм представлен в модификации Жу и Джонса (Zhou and Jones 2005), где каждая площадь приобретает различный вес в зависимости от пропорций угла линии и реализован в инструменте Simplify Line (режим WEIGHTED_AREA). Рис. C.4: Принцип работы алгоритма Висвалингам-Уайатта C.1.2 Модифицированное расстояние Хаусдорфа Модифицированное расстояние Хаусдорфа (MHD), широко используется как метрика оценки геометрической точности линий. Пусть даны два множества точек \\(\\mathcal{A} = \\lbrace a_1,...,a_{N_a} \\rbrace\\) и \\(\\mathcal{B} = \\lbrace b_1,...,b_{N_b} \\rbrace\\). Тогда среднее расстояние между \\(\\mathcal{A}\\) и \\(\\mathcal{B}\\) может быть вычислено как \\(\\overline{d}(\\mathcal{A},\\mathcal{B}) = \\frac{1}{N_a}\\sum_{a \\in \\mathcal{A}}d(a,\\mathcal{B})\\), где \\(d(a, \\mathcal{B}) = \\min_{b \\in \\mathcal{B}}\\lVert a - b \\rVert\\). Аналогично, обратное расстояние между \\(\\mathcal{B}\\) и \\(\\mathcal{A}\\) вычисляется как \\(\\overline{d}(\\mathcal{B},\\mathcal{A}) = \\frac{1}{N_b}\\sum_{b \\in \\mathcal{B}}d(b,\\mathcal{A})\\), где \\(d(b, \\mathcal{A}) = \\min_{a \\in \\mathcal{A}}\\lVert b - a \\rVert\\). Имея прямое и обратное расстоения между \\(\\mathcal{A}\\) и \\(\\mathcal{B}\\), модифицированное расстояние Хаусдорфа MHD вычисляется как: \\[ MHD(\\mathcal{A}, \\mathcal{B}) = max\\big(\\overline{d}(\\mathcal{A},\\mathcal{B}), \\overline{d}(\\mathcal{B},\\mathcal{A})\\big), \\] Грубо говоря, MHD есть есть максимальное из средних расстояний от \\(\\mathcal{A}\\) к \\(\\mathcal{B}\\) и от \\(\\mathcal{B}\\) к \\(\\mathcal{A}\\). Чем меньше значение MHD, тем интегрально ближе \\(\\mathcal{A}\\) и \\(\\mathcal{B}\\) друг к другу. Введение этой метрики вдохновлено классическим расстоянием Хаусдорфа (в котором \\(d(\\mathcal{A},\\mathcal{B}) = max_{a \\in \\mathcal{A}} d(a,\\mathcal{B})\\)), которое, как видно из определения, чувствительно к точкам-выбросам, поскольку использует максимальное расстояние вместо среднего. При оценке геометрической точности в качестве множеств \\(\\mathcal{A}\\) и \\(\\mathcal{B}\\) используются ребра исходного и генерализованного множеств линий соответственно. C.1.3 Коэффициент относительной извилистости Коэффициент извилистости — мера извилистости объекта, вычисляемая как отношение длины линии к длине отрезка, соединяющего ее концы. Пусть линия \\(L\\) состоит из \\(n\\) узлов, соединенных ребрами. Тогда коэффициент ее извилистости будет равен: \\[K = \\frac{\\sum_{i=1}^{n-1} l_{i, i+1}}{l_{1,n}}\\] где \\(l_{i,k}\\) — Евклидово расстояние между i-м и k-м узлом линии. Коэффициент извилистости зависит от конфигурации сглаживающей, описывающей общую траекторию линии. В предельном случае, когда имеют дело с замкнутой фигурой, величина \\(К\\) не определена, т.к. длина стягивающей хорды равняется нулю. Помимо этого, общая извилистость дает мало информации о характере изгибов линии. Чтобы исправить этим недостатки, предлагается вычислить извилистость для каждого изгиба линии, а затем их осреднить: \\[\\overline{K} = \\frac{\\sum_{j=1}^{m} K_j}{m}\\] где \\(K_j\\) — коэффициент извилистости для \\(k\\)-го изгиба линии, \\(m\\) — число изгибов Часть 1. Автоматизация методов оценки геометрической точности и коэффициента относительной извилистости Автоматизация вычисления модифицированного расстояния Хаусдорфа MHD (оценка геометрической точности) Напишите на языке Python функцию, которая берет на вход два объекта (условно A и B) класса Shapely LineString и вычисляет между ними модифицированное расстояние Хаусдорфа. Общий алгоритм действий в одну сторону (от A к B) должен быть такой: Конвертировать A во множество точек. Вычислить расстояние от каждой точки до B с использованием функции shapely.distance(). Осреднить полученные расстояния. Аналогичным образом надо получить среднее расстояние в обратную сторону (от B к A). Из двух средних расстояний взять максимальное. Автоматизация вычисления коэффициента относительной извилистости (оценка морфологического соответствия) Напишите на языке Python функцию, которая берет на вход один объект класса Shapely LineString и вычисляет его относительную извилистость. Общий алгоритм действий должен быть такой: Пройтись по всем точкам линии от первой до последней Для каждой последующей точки определить ее расположение относительно прямой, проходящей через две предыдущие точки (\\(-1\\), \\(0\\) или \\(1\\), см. оператор side в лекциях по геоинформатике). Разметить изгибы точками, в которых меняется знак поворота. Вычислить для каждого изгиба его извилистость как отношение его длины к длине базовой линии. Осреднить полученные значения. Отчет Опишите ваш опыт разработки инструментов оценки геометрической точности и морфологического соответствия для линий. Сопроводите данный раздел отчета снимками экрана и примерами получаемых результатов Часть 2. Сравнение алгоритмов генерализации Выберите береговую линию для экспериментов. Используя шаг сетки, равный 2 мм в результирующем масштабе (1:5 000 000), упростите линию с помощью метода Ли-Оупеншоу. Подберите параметры алгоритмов Дугласа-Пейкера, Ванга-Мюллера и Висвалингам-Уайатта таким образом, чтобы количество результирующих точек в линиях было примерно равно (±5%) количеству точек после генерализации методом Ли-Оупеншоу. Выпишите эти параметры в отчет. Рассчитайте модифицированное Хаусдорфово расстояние от оригинальной линии для четырех полученных результатов генерализации Рассчитайте коэффициент относительной извилистости для исходной и результирующей линии. Сведите в одну таблицу параметры алгоритмов, а также рассчитанные величины MHD и коэффициента относительной извилистости по каждому алгоритму. Оцените алгоритмы по следующим критериям: При каких параметрах инструментов количество результирующих узлов линий одинаково? Модоифицированное хаусдорфово расстояние. Насколько эффективно алгоритм использует точки? Какой из алгоритмов дает контур, наиболее близко повторяющий исходную кривую? Относительная извилистость. Насколько сглаженным/угловатым получается изображение? Какой из алгоритмов дает значение извилистости более близкое к оригиналу? Какой метод на ваш взгляд дает наиболее удовлетворительные результаты с точки зрения принципов картографической генерализации и лучше передает морфологию объектов? Сделайте для отчета 4 иллюстрации с мини-легендой, на каждой из которых показан исходный контур и поверх — его генерализованная версия (по иллюстрации на каждый алгоритм). Разные алгоритмы выделите разными цветами. Изложите в отчете свой опыт сравнительного анализа алгоритмов генерализации. References Douglas, D. H., and T. K. Peucker. 1973. “Algorithms for the Reduction of the Number of Points Required to Represent a Digitized Line or Its Caricature.” The Canadian Cartographer, no. 10(2): 112–22. Li, Zhilin, and Stan Openshaw. 1992. “Algorithms for Automated Line Generalization Based on a Natural Principle of Objective Generalization.” International Journal of Geographical Information Systems 6 (5): 373–89. https://doi.org/10.1080/02693799208901921. Visvalingam, M, and J D Whyatt. 1993. “Line Generalisation by Repeated Elimination of Points.” The Cartographic Journal 30 (1): 46–51. https://doi.org/10.1179/caj.1993.30.1.46. Wang, Zeshen, and Jean-Claude Müller. 1998. “Line Generalization Based on Analysis of Shape Characteristics.” Cartography and Geographic Information Science 25 (1): 3–15. https://doi.org/10.1559/152304098782441750. Zhou, Sheng, and Christopher B Jones. 2005. “Shape-Aware Line Generalisation With Weighted Effective Area.” In Developments in Spatial Data Handling, 12. Berlin, Heidelberg: Springer. "],["lines-network-work.html", "D Задание №4. Отбор элементов транспортной сети Часть 1. Подготовка исходных данных Часть 2. Создание скрипта для отбора элементов транспортной сети Часть 3. Создание скрипта для оценки относительной графической нагрузки по линейным объектам Часть 4. Создание и анализ карты транспортной связности районных центров субъекта", " D Задание №4. Отбор элементов транспортной сети Цель задания — освоение методики отбора элементов транспортных сетей с использованием алгоритмов на графах Аннотация. Задание посвящено знакомству с методикой автоматизированного отбора дорог для мелкомасштабного картографирования. Необходимо реализовать алгоритм прореживания транспортной сети (отбора линий), основанный на принципе маршрутной связности населенных пунктов. Дополнительно реализуется расчет условной графической нагрузки для линий. Задание выполняется с примененим библиотек osmnx, networkx и geopandas. Предлагаемый для реализации алгоритм основан на предположении, что в результирующем масштабе необходимо показывать транспортные пути, по которым проходят кратчайшие маршруты между соседними населенными пунктами. Понятие соседства при решении этой задачи может быть формализовано разоличными способами: по количеству (Samsonov and Krivosheina 2012), либо по смежности (Schmid and Janatzek 2013). В настоящей работе используется соседство по смежности: соседними считаются населенные пункты, у которых соприкасаются ячейки Вороного. Общая схема алгоритма выглядит следующим обазом: Строится граф дорожной сети. Строится диаграмма Вороного населенных пунктов. Организуется цикл по точкам населенных пунктов: выбирается текущая точка (центральная); выбирается относящаяся к текущей точке ячейка Вороного; для выбранной ячейки выбираются смежные с ней (касающиеся по границе); выбираются соответствующие соседним ячейкам точки населенных пунктов; от каждой соседней точки строится маршрут до центральной точки линии, по которым прошли маршруты, помечаются флагом. В результате выполнения алгоритма все транспортные пути, которые оказались задействованы в кратчайших маршрутах, будут помечены специальным флагом. Генерализация завершается исключением непомеченных линий (физическое удаление не требуется, достаточно выполнить атрибутивный запрос). Часть 1. Подготовка исходных данных Выберите регион для выполнения задания и скопируйте себе соответствующую базу данных из архива приложенного к данному заданию. Добавьте в исходный слой населенных пунктов (poppnt) целочисленное статуса status, которое будет хранить роль населенного пункта в процессе отбора элементов транспортной сети. Заполните это поле следующим образом: двойка (\\(2\\)) должна стоять у населенных пунктов, располагающихся внутри выбранного субъекта и имеющих статус не ниже райцентра, единица (\\(1\\)) должна стоять у всех населенных пунктов, располагающихся за пределами субъекта. Все остальные населенные пункты (располагающиеся внутри субъекта, но имеющие статус ниже райцентра) должны иметь значение \\(0\\). Добавьте в исходный слой линий (rdslin) целочисленное поле select, которое будет заполняться флагом отбора (0/1). Создайте в слое дорог новое поле highway и заполните его значениями: 'primary' — для автомагистралей и усовершенствованных шоссе (CLASS_ID = 62110000, 62121000) 'secondary' — для шоссе (CLASS_ID = 62122000) 'tertiary' — для всех прочих дорог Это нужно для того чтобы последующий механизм маршрутизации мог отдавать больший приоритет более крупным дорогам. Сконвертируйте полученный набор линий в формат OSM XML, используя JOSM или ogr2osm. Часть 2. Создание скрипта для отбора элементов транспортной сети В качестве входных данных необходимо предусмотреть 5 слоев: точки населенных пунктов, линии дорог в формате OSM XML, линии дорог в геореляционном формате, поле флага отбора По результатам выполнения скрипта в поле Show Field должно быть проставлено значение \\(1\\) для отобранных линий. Все остальные линии должны иметь значение \\(0\\). Базовый алгоритм для построения одного маршрута следующий: Постройте граф из файла OSM XML (ox.graph_from_xml) Определите для населенных пунктов ближайшие к ним вершины графа (ox.nearest_nodes) Постройте между ними маршрут (ox.shortest_path) Получите подграф, соответствующий маршруту (nx.subgraph) Экспортируйте подграф в фрейм данных (ox.graph_to_gdfs) Объедините геометрический столбец фрейма в один мультиобъект и буферизуйте его на малую величину (gdf.geometry.unary_union.buffer(1e-9)) Отберите дороги по правилу нахождения внутри полученного буфера (within) и вычислите им select = 1. После того как базовый алгоритм запрограммирован, адаптируйте его к методике отбора с учетом необходимости построения маршрутов до ближайших населенных пунктов. В построении маршрута должны участвовать все точки со статусом выше 0. Часть 3. Создание скрипта для оценки относительной графической нагрузки по линейным объектам Используя имеющиеся у вас знания и навыки, создайте скрипт Python Toolbox, который будет давать оценку относительной графической нагрузки для линейных объектов по ячейкам регулярной сети. Относительная графическая нагрузка по линейным объектам – суммарная длина линий каждого класса (Lk) с учетом весовых коэффициентов (wk), деленная на площадь ячейки (A): \\[\\rho_{L} = \\frac{\\sum_{k}^{}{w_{k}L_{k}}}{A}\\] Числитель формулы имеет единицы измерения на местности (км). Знаменатель выражен в единицах измерения карты (\\(см^2\\)). Применительно к линейным объектам относительная графическая нагрузка является аналогом густоты, и также выражается в относительных единицах (\\(км/см^2\\)), но учитывает толщину линий в качестве весовых коэффициентов \\(w\\), чтобы придать большую нагрузку ячейкам, где проходят линии высоких классов. Веса \\(w\\) должны быть прямо пропорциональны толщинам линий (или равны им). Результатом выполнения инструмента должен быть полигональный слой c ячейками регулярной сети, для каждой из которой в некоторое поле записана относительная графическая нагрузка, рассчитанная по вышеприведенной формуле. Указания к выполнению: В качестве отправной точки можно использовать скрипт для оценки относительной графической нагрузки точечных объектов, разработанный вами в Самостоятельной работе №1. В процессе экспериментальной работы используйте следующие толщины линий (в пикселах): Таблица D.1: Параметры толщины линии Класс Толщина линии primary 4 secondary 2 tertiary 1 Часть 4. Создание и анализ карты транспортной связности районных центров субъекта Используя разработанные инструменты отбора и оценки графической нагрузки, выполните заключительную часть работы: Выполните отбор элементов дорожной сети, проходящих через районные центры выбранного субъекта. Оформите результат в виде карты масштаба 1:6 000 000. Используйте толщины линий 2, 1 и 0.5 мм соответственно. На схеме должны быть подписаны все районные центры внутри и за пределами субъекта, нанесена граница субъекта и оформлена легенда по трем классам дорог. Вычислите условную графическую нагрузку всех исходных дорог в масштабе 1:1 000 000 (размер квадрата 2х2 см в масштабе карты). Используйте толщины линий 4, 2 и 1 мм соответственно. Оформите картограмму графической нагрузки в масштабе 1:6 000 000. Вычислите условную графическую нагрузку отобранных дорог в масштабе 1:6 000 000 (размер квадрата 2х2 см в масштабе карты). Используйте толщины линий 2, 1 и 0,5 мм соответственно. Оформите картограмму графической нагрузки в масштабе 1:6 000 000. Напишите отчет о проделанной работе, включающий: Описание целей и задач самостоятельной работы Описание идеи алгоритмов отбора элементов дорожной сети и оценки условной графической нагрузки для линейных объектов Процесс создания скриптов и их внешний вид Процесс экспериментальной работы Оценку полученных результатов с точки зрения географической достоверности. Оценка должна включать сравнение исходной и результирующей картины транспортной сети региона визуально и по картограмме условной графической нагрузки. Douglas, D. H., and T. K. Peucker. 1973. “Algorithms for the Reduction of the Number of Points Required to Represent a Digitized Line or Its Caricature.” The Canadian Cartographer, no. 10(2): 112–22. Li, Zhilin, and Stan Openshaw. 1992. “Algorithms for Automated Line Generalization Based on a Natural Principle of Objective Generalization.” International Journal of Geographical Information Systems 6 (5): 373–89. https://doi.org/10.1080/02693799208901921. Samsonov, T, and A Krivosheina. 2012. “Joint Generalization of City Points and Road Network for Small-Scale Mapping,” 1–7. Schmid, Falko, and H A Janatzek. 2013. “A Method for High-Level Street Network Extraction of OpenStreetMap Data in OpenScienceMap,” 14. Visvalingam, M, and J D Whyatt. 1993. “Line Generalisation by Repeated Elimination of Points.” The Cartographic Journal 30 (1): 46–51. https://doi.org/10.1179/caj.1993.30.1.46. Wang, Zeshen, and Jean-Claude Müller. 1998. “Line Generalization Based on Analysis of Shape Characteristics.” Cartography and Geographic Information Science 25 (1): 3–15. https://doi.org/10.1559/152304098782441750. Zhou, Sheng, and Christopher B Jones. 2005. “Shape-Aware Line Generalisation With Weighted Effective Area.” In Developments in Spatial Data Handling, 12. Berlin, Heidelberg: Springer. References Samsonov, T, and A Krivosheina. 2012. “Joint Generalization of City Points and Road Network for Small-Scale Mapping,” 1–7. Schmid, Falko, and H A Janatzek. 2013. “A Method for High-Level Street Network Extraction of OpenStreetMap Data in OpenScienceMap,” 14. "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
