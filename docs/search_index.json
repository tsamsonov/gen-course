[["lines-network-work.html", "D Задание №4. Отбор элементов транспортной сети Часть 1. Подготовка исходных данных Часть 2. Создание инструмента геообработки Python Toolbox для отбора элементов транспортной сети Часть 3. Создание инструента Python Toolbox для оценки относительной графической нагрузки по линейным объектам Часть 4. Создание и анализ карты транспортной связности районных центров субъекта", " D Задание №4. Отбор элементов транспортной сети Цель задания — освоение методики отбора элементов транспортных сетей с использованием алгоритмов на графах Аннотация. Задание посвящено знакомству с методикой автоматизированного отбора дорог для мелкомасштабного картографирования. Необходимо реализовать алгоритм прореживания транспортной сети (отбора линий), основанный на принципе маршрутной связности населенных пунктов. Дополнительно реализуется расчет условной графической нагрузки для линий. Задание выполняется путем разработки инструмента геообработки Python Toolbox с модулем Network Analyst (arcpy.na). Предлагаемый для реализации алгоритм основан на предположении, что в результирующем масштабе необходимо показывать транспортные пути, по которым проходят кратчайшие маршруты между соседними населенными пунктами. Понятие соседства при решении этой задачи может быть формализовано разоличными способами: по количеству (Samsonov and Krivosheina 2012), либо по смежности (Schmid and Janatzek 2013). В настоящей работе используется соседство по смежности: соседними считаются населенные пункты, у которых соприкасаются ячейки Вороного. Общая схема алгоритма выглядит следующим обазом: Строится граф дорожной сети. Строится диаграмма Вороного населенных пунктов. Организуется цикл по точкам населенных пунктов: выбирается текущая точка (центральная); выбирается относящаяся к текущей точке ячейка Вороного; для выбранной ячейки выбираются смежные с ней (касающиеся по границе); выбираются соответствующие соседним ячейкам точки населенных пунктов; от каждой соседней точки строится маршрут до центральной точки (решается задача Closest Facility) линии, по которым прошли маршруты, помечаются флагом. В результате выполнения алгоритма все транспортные пути, которые оказались задействованы в кратчайших маршрутах, будут помечены специальным флагом. Генерализация завершается исключением непомеченных линий (физическое удаление не требуется, достаточно выполнить атрибутивный запрос). Часть 1. Подготовка исходных данных Выберите регион для выполнения задания и скопируйте себе соответствующую базу данных из архива приложенного к данному заданию. Добавьте в исходный слой линий (rdslin) целочисленное поле Show, которое будет заполняться флагом отбора. Добавьте в исходный слой населенных пунктов (poppnt) целочисленное статуса Status, которое будет хранить роль населенного пункта в процессе отбора элементов транспортной сети. Заполните это поле следующим образом: единица (\\(1\\)) должна стоять у населенных пунктов, располагающихся внутри выбранного субъекта и имеющих статус не ниже райцентра, двойка (\\(2\\)) должна стоять у всех населенных пунктов, располагающихся за пределами субъекта. Все остальные населенные пункты (располагающиеся внутри субъекта, но имеющие статус ниже райцентра) должны иметь значение \\(0\\). Создайте набор пространственных объектов (Feature Dataset) внутри базы геоданных и импортируйте в него слой дорожной сети. Создайте в слое дорог новое целочисленное поле Hierarchy и заполните его значениями: 1 — для автомагистралей и усовершенствованных шоссе 2 — для шоссе 3 — для всех прочих дорог Внутри набора пространственных объектов создайте набор сетевых данных (Network Dataset), используя слой rdslin. Все параметры оставьте по умолчанию, за исключением: Elevation Fields — None Driving Directions — None Attributes: добавить новый атрибут типа Hierarchy (Add). Далее добавить для него оценщика (Evaluators), указать, что оценку необходимо делать по полю Hierarchy. Часть 2. Создание инструмента геообработки Python Toolbox для отбора элементов транспортной сети В качестве входных данных необходимо предусмотреть 5 слоев: исходные точки (Input Points), исходные линии (Input Lines), набор сетевых данных (Input Network Dataset) поле статуса (Status Field) поле видимости (Show Field) По результатам выполнения инструмента в поле Show Field должно быть проставлено значение \\(1\\) для отобранных линий. Все остальные линии должны иметь значение \\(0\\). Реализуйте скрипт геообработки в соответствии со следующей последовательностью действий: Создать слой линий (Create Feature Layer). Создать слой точек (Create Feature Layer), оставив в нем только точки, со статусом выше \\(0\\) (используйте параметр where_clause) Создать диаграмму Вороного для полученного слоя точек (Create Thiessen Polygons). Разместите диаграмму в памяти компьютера (in_memory\\voronoy). Создать слой диаграммы Вороного (Create Feature Layer). Создать поисковый курсор (rows = arcpy.da.SearchCursor(...)) для последовательного обхода ячеек диаграммы Вороного (1), оставив в нем только поле статуса и поле геометрии. Организовать цикл по строкам созданного курсора (for row in rows:). Все дальнейшие операции выполняются внутри цикла. Если текущая ячейка имеет статус \\(2\\), перейти на следующую итерацию цикла. Создать на основе сетевого набора данных слой поиска ближайших пунктов обслуживания (Make Closest Facility Layer). В качестве параметра Number of Facilities to Find оставьте 1. Установите режим движения TRAVEL_FROM. Выбрать точку населенного пункта геометрией объекта текущей строки курсора (row[1], если геометрическое поле указано вторым по порядку), используя правило WITHIN (Select By Location). Добавить в слой поиска выбранную точку (Add Locations в режиме Facilities). Выбрать с помощью геометрии текущего полигона (row[1]) его соседей, используя правило (Select By Location). Выбрать в слое точек с помощью выбранных полигонов, используя правило INTERSECT (Select By Location). Добавить в слой поиска ближайших пунктов обслуживания точки соседей (Add Locations в режиме Incidents) Очистить выборку в слое диаграммы Вороного (Select By Attributes в режиме CLEAR\\_SELECTION). Очистить выборку в слое точек (Select By Attributes в режиме CLEAR\\_SELECTION). Запустить расчет задачи Closest Facility (Solve) Извлечь линии маршрутов Routes (Select Data) из полученного слоя. Выбрать линии в слое дорог маршрутами (Select By Location), используя правило SHARE_A_LINE_SEGMENT_WITH. Вычислить поле Show Field для выбранных линий 2, используя калькулятор поля (Calculate Field). Проставить выделенным линиям значение 1. Очистить выборку в слое линий. (Select By Attributes в режиме CLEAR_SELECTION). Удалить слой Closest Facility (Delete). Часть 3. Создание инструента Python Toolbox для оценки относительной графической нагрузки по линейным объектам Используя имеющиеся у вас знания и навыки, создайте скрипт Python Toolbox, который будет давать оценку относительной графической нагрузки для линейных объектов по ячейкам регулярной сети. Относительная графическая нагрузка по линейным объектам – суммарная длина линий каждого класса (Lk) с учетом весовых коэффициентов (wk), деленная на площадь ячейки (A): \\[\\rho_{L} = \\frac{\\sum_{k}^{}{w_{k}L_{k}}}{A}\\] Числитель формулы имеет единицы измерения на местности (км). Знаменатель выражен в единицах измерения карты (\\(см^2\\)). Применительно к линейным объектам относительная графическая нагрузка является аналогом густоты, и также выражается в относительных единицах (\\(км/см^2\\)), но учитывает толщину линий в качестве весовых коэффициентов \\(w\\), чтобы придать большую нагрузку ячейкам, где проходят линии высоких классов. Веса \\(w\\) должны быть прямо пропорциональны толщинам линий (или равны им). Входные параметры: Линейный слой Поле Size Field, отвечающее за графический вес линии (толщина линии в миллиметрах). Пространственное разрешение сетки (в сантиметрах изображения). Масштаб изображения Требования к результату: Результатом выполнения инструмента должен быть полигональный слой c ячейками регулярной сети, для каждой из которой в поле Load записана относительная графическая нагрузка, рассчитанная по вышеприведенной формуле. Указания к выполнению: В качестве отправной точки можно использовать инструмент геообработки для оценки относительной графической нагрузки точечных объектов, разработанный вами в Самостоятельной работе №1. В процессе экспериментальной работы используйте следующие толщины линий (в пикселах): Таблица D.1: Параметры толщины линии Класс Толщина линии 1 4 2 2 3 1 Часть 4. Создание и анализ карты транспортной связности районных центров субъекта Используя разработанные инструменты отбора и оценки графической нагрузки, выполните заключительную часть работы: Выполните отбор элементов дорожной сети, проходящих через районные центры выбранного субъекта. Оформите результат в виде карты масштаба 1:8 000 000. Используйте толщины линий 3, 1.5 и 0.75 пункта соответственно. На схеме должны быть подписаны все районные центры внутри и за пределами субъекта, нанесена граница субъекта и оформлена легенда по трем классам дорог. Вычислите условную графическую нагрузку всех исходных дорог в масштабе 1:1 000 000 (размер квадрата 2х2 см в масштабе карты). Используйте толщины линий 6, 3 и 1.5 пункта соответственно. Оформите картограмму графической нагрузки в масштабе 1:8 000 000. Вычислите условную графическую нагрузку отобранных дорог в масштабе 1:8 000 000 (размер квадрата 2х2 см в масштабе карты). Используйте толщины линий 3, 1.5 и 0.75 пункта соответственно. Оформите картограмму графической нагрузки в масштабе 1:8 000 000. Напишите отчет о проделанной работе, включающий: Описание целей и задач самостоятельной работы Описание идеи алгоритмов отбора элементов дорожной сети и оценки условной графической нагрузки для линейных объектов Процесс создания инструментов геообработки и их внешний вид Процесс экспериментальной работы Оценку полученных результатов с точки зрения географической достоверности. Оценка должна включать сравнение исходной и результирующей картины транспортной сети региона визуально и по картограмме условной графической нагрузки. "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
