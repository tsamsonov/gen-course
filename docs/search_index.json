[["points-sel-work.html", "A Задание №1. Отбор точечных объектов Реализация алгоритма Settlement Spacing Реализация модели оценки условной графической нагрузки Отбор населенных пунктов для карты масштаба 1:4 000 000 Реализация алгоритма взвешенной эффективной площади Применение алгоритма взвешенной эффективной площади Оценка полученных результатов Отчет", " A Задание №1. Отбор точечных объектов Цель задания — освоение методики автоматизированного отбора точечных объектов на примере населенных пунктов. Задачи: Изучить принципы, заложенные в методы отбора (исключения) точек Settlement Spacing (прореживание населенных пунктов) и Voronoy-based (взвешенной эффективной площади). Реализовать метод Settlement Spacing в виде инструмента геообработки Python Toolbox. Подготовить слой населенных пунктов субъекта РФ на основе данных OpenStreetMap. Реализовать оценку графической нагрузки в виде инструмента геообработки Python Toolbox. Выполнить параметризацию коэффициента масштабирования для метода Settlement Spacing при графической нагрузке \\(2\\), \\(4\\) и \\(6\\) \\(см^{-2}\\) Осуществить автоматизированный отбор населенных пунктов для масштаба \\(1:4~000~000\\). Реализовать метод взвешенной эффективной площади в виде инструмента геообработки Python Toolbox Осуществить автоматизированный отбор населенных пунктов для масштаба \\(1:4~000~000\\), оставив такое же количество населенных пунктов, что и в методе Settlement Spacing. Выполнить численную, графическую и географическую оценку результатов генерализации обоими методами. Сравнить результаты между собой. При выполнении задания в качестве справочника используется официальное руководство по созданию инструментов Python Toolbox. Реализация алгоритма Settlement Spacing Входные параметры: Точечный слой (Input Points). Поле важности точки (Importance Field). Поле сохранения точки (Remain Field). Масштабирующий коэффициент (Scale). Входные данные: Тестирование инструмента производится на примере слоя poppnt_ural (можно вырезать из него небольшой фрагмент из нескольких десятков точек. Результат: По результатам выполнения инструмента каждой точке в поле Remain Field должно быть проставлено значение \\(1\\) (оставить) или \\(0\\) (убрать). Алгоритм решения задачи: Отсортировать точки в соответствии со значением поля Importance так чтобы первыми были точки с наибольшим весом (Sort). Добавить в полученный класс пространственных объектов поле Remain Field. Создать слой из него (Make Feature Layer). Создать обновляющий курсор, который будет ходить по всем точкам пространственных объектов (arcpy.da.UpdateCursor) в порядке уменьшения важности точки. Организовать цикл for по всем строками итератора, выполнив следующие действия для текущей точки: 4.2. Извлечь значение поля Importance (Get Field Value) 4.3. Вычислить радиус буферной зоны (Calculate Value) как частное от деления входного параметра Scale и значения поля Importance (чем важнее точка, тем меньше будет радиус зоны). 4.4. Построить буферную зону, используя вычисленное значение 2.3 (Buffer). 4.5. Выбрать в слое (3) уже отобранные точки по значению атрибута (Select Layer by Attributes). 4.6. Довыбрать (SUBSET_SELECTION) буферной зоной (4.4) отобранные точки (4.5) с помощью пространственного запроса (Select Layer by Location). 4.7. Подсчитать количество отобранных точек (Get Count). 4.8. Вычислить флаг отбора для текущей точки (2.1), в зависимости от того, сколько точек выбралось на предыдущем шаге. 4.9. Записат результат в поле сохранения точки через курсор. 4.10. Обновить текущую строку (updateRow) через курсор. Реализация модели оценки условной графической нагрузки Условная графическая нагрузка – средневзвешенное количество точек на единицу площади, где в качестве веса выступает размер точки, используемый при ее отображении на карте Входные параметры: Точечный слой. Поле Size Field, отвечающее за графический вес точки (диаметр значка). Пространственное разрешение сетки (в метрах). Выходной слой сетки. Требования к входным данным: Поле Size Field должно содержать размеры значков, используемых для визуализации точек. Если значения всех размеров равны \\(1\\), вы получите обычную густоту точек на единицу площади. Алгоритм решения задачи: Построить регулярную сетку с заданным разрешением и охватом, покрывающим входной набор точек с небольшим запасом. Подсказка: вам необходимо построить горизонтальный ограничивающий прямоугольник (Minimum Bounding Geometry), буферизовать его на величину разрешения сетки (Buffer) и подать буфер в качестве экстента в инструмент генерации регулярной сетки (Create Fishnet). Подсчитать суммарный графический вес точек в каждой ячейке и записывает результат в новое поле. Подсказка: вам понадобятся инструменты статистики (Tabulate Intersection), и присоединения поля (Join Field). Сохранить полученную сетку в выходной файл. Отбор населенных пунктов для карты масштаба 1:4 000 000 В данной — заключительной — части задания необходимо произвести отбор населенных пунктов, используя собственные скрипты, а также произвести графическую оценку полученных результатов. Алгоритм выполнения задания: Скачать данные OSM на территорию Субъекта Федерации. Не следует для выполнения работы брать субъекты с малым числом населенных пунктов (Мурманская область, Еврейская АО, Республика Калмыкия и т.п.). Внимание: субъекты у всех студентов должны быть разные! Перепроецировать слой settlement-points в наилучшую проекцию для выбранной территории Сформировать поля Importance и Size, используя следующее отображение атрибутов: PLACE Importance Size City 5 5 Town 4 3 Village 3 1 Hamlet 2 1 Locality 1 1 Используя фрагмент данных и значения параметра \\(С\\) (Scale) в диапазоне от \\(1000\\) до \\(10000\\) с шагом \\(1000\\), подобрать регрессионную зависимость вида \\(y = \\alpha x^{-\\beta}\\) между значением параметра масштабирования \\(C\\) (Scale) и средней графической нагрузкой (\\(ед.~на~см^2\\)) в масштабе \\(1:4~000~000\\). Средняя графическая нагрузка оценивается как среднее значение по всем ненулевым ячейкам регулярной сетки. Размер сетки — \\(1~см^2\\) в результирующем масштабе. Найденная зависимость должна иметь примерно следующий вид: Выполнить отбор населенных пунктов с графической нагрузкой \\(2\\), \\(4\\) и \\(6\\) населенных пункта на \\(см^2\\) для масштаба \\(1:4~000~000\\). Соответствующий параметр \\(C\\) (Scale) подберите, используя найденную регрессионную зависимость. Реализация алгоритма взвешенной эффективной площади Входные параметры: Входной точечный слой (Input Points). Поле важности точки (Importance Field). Поле сохранения точки (Remain Field). Процент сохраняемых точек (Selection percentage). Входные данные: Тестирование инструмента производится на примере слоя poppnt_ural (можно вырезать из него небольшой фрагмент из нескольких десятков точек. Результат: По результатам выполнения инструмента каждой точке в поле Remain Field должно быть проставлено значение \\(1\\) (оставить) или \\(0\\) (убрать). Алгоритм решения задачи: Добавить поле сохранение точки (Add Field). Заполнить поле сохранения точки знаечнием \\(1\\) (Calculate Field). По умолчанию все точки сохранены. Создать слой для осуществления выборки точек (Make Feature Layer). Вычислить общее количество точек во входном слое (Get Count). Используя общее число точек и входной процент сохраняемых, вычислить количество точек, которое нужно убрать. Создать счётчик убранных точек и инициировать его значением \\(1\\). Создать цикл while пока счетчик убранных точек меньше значения, вычисленного на шаге (5). Внутри цикла выполнить следующие шаги: 7.1. Выбрать в слое (3) точки, у которых значение поля сохранения равно \\(1\\). 7.2. Построить на их основе в оперативной памяти компьютера (in_memory) диаграмму Вороного (Create Thiessen Polygons) в режиме ALL (сохранить все атрибуты). 7.3. Добавить в нее поле геодезической площади (Add Geometry Attributes в режиме AREA_GEODESIC). 7.4. Добавить в нее поле для веса точки (Add Field). 7.5. Вычислить поле веса как произведение поля важности и геодезической площади AREA_GEO (Calculate Field). Чтобы правильно написать выражение для вычисления, изучите синтаксис вычисления полей в режиме PYTHON_9.3 в справке к инструменту. 7.6. Добавьте поле для замораживания ячеек диаграммы Вороного (Add Field). 7.7. Заполните созданное поле нулями (Calculate Field). По умолчанию все ячейки разморожены. 7.8. Создайте слой для выборки в диаграмме Вороного (7.2) (Make Feature Layer). 7.9. Создайте прогресс-бар типа step (arcpy.SetProgressor) со значениями от \\(0\\) до количества отбираемых точек (5). 7.9. Создайте обновляющий курсор (arcpy.da.UpdateCursor), который будет включать в себя поля сохранения, заморозки и геометрии (всего 3 поля), и ходить по строкам диаграммы Вороного (7.2) в порядке возрастания значений весов (7.4). 7.10. Организуйте цикл for, который для каждой строки курсора будет выполнять следующие действия: Если поле заморозки равно \\(1\\), перейти на следующую итерацию цикла. Установить надпись прогресс-бара (arcpy.SetProgressorLabel), которая говорит, что сейчас отбирается i-я точка (6) из общего числа отбираемых (5). Записать в поле отбора значение \\(0\\) через курсор. Обновить текущую строку (updateRow) через курсор. Выбрать в слое диаграммы Вороного (7.8) ячейки, пересекающиеся с геометрией текущей строки (Select Layer by Location). Заполните для выбранных ячеек поле заморозки (7.6) значением \\(1\\). Установите значение прогресс-бара (arcpy.SetProgressorPosition) в текущее положение счетчика отбора (6). Увеличите счетчик отбора (6) на единицу. Если счетчик отбора (6) стал больше количества отбираемых точек (5), прервите цикл курсора. 7.11. Выберите в слое диаграммы Вороного (7.8) ячейки, у которых значение флага отбора равно \\(0\\) (Select Layer by Attribute). 7.12. Выберите в слое точек (3) все точки, у которых значение флага отбора равно \\(1\\) (Select Layer by Attribute). 7.13. Довыберите точки, которые пересекаются с выборкой в слое диаграммы Вороного (Select Layer By Location в режиме SUBSET_SELECTION). 7.14. Заполните для выбранных точек поле отбора значением \\(0\\) (Calculate Field). Сбросьте прогресс-бар (arcpy.ResetProgressor). Применение алгоритма взвешенной эффективной площади Используя разработанный инструмент, выполните отбор точек, сохранив процент, аналогичный тому, что был получен в Settlement Spacing при нагрузках \\(2\\), \\(4\\) и \\(6\\). Оценка полученных результатов Выполнить параметризацию параметра \\(x\\) обобщенного закона Топфера для трёх полученных генерализаций по каждому из двух алгоритмов, исходя из предположения, что отношение результирующего и исходного масштаба равно \\(1:40\\). Построить карты графической нагрузки для обоих алгоритмов. Оформить результаты в виде серии карт, отображающей: границу региона множество исходных точек бледно-серым цветом множество отобранных точек черным цветом соответствующего размера подписи основных населенных пунктов картограмму условной графической нагрузки Пример серии карт (вы можете упорядочить изображения другим путем — например, по вертикали): Отчет Работа оформляется в виде письменного отчета, в котором необходимо изложить все этапы исследования: цель и задачи исследования, суть метода отбора точек, суть принципа оценки условной графической нагрузки, суть обобщенного закона Топфера, технология создания инструментов Python Toolbox, определения их параметров и типов параметров описание эксперимента по генерализации, включая: постановку задачи, нахождение регрессионной зависимости, сравнение времени работы модели и скрипта, выполнение отбора, оценку результатов в графическом (карты условной нагрузки) и численном (параметризация обобщенного закона Топфера) виде. "]]
